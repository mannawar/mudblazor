@page "/employees"
@using EmployeeManagement.Services
@inject EmployeeService EmployeeService


<MudContainer  Class="pa-4">
    <MudPaper Elevation="4" Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Employee List</MudText>

        <!-- Search Field -->
        <MudTextField @bind-Value="searchQuery" Label="Search Employees..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-4" />

        <!-- Employee List -->
        <MudTable Items="paginatedEmployees" Dense="true">
            <ColGroup>
                <col style="width: 20%;" />
                <col style="width: 20%;" />
                <col style="width: 20%;" />
                <col style="width: 20%;" />
                <col style="width: 20%;" />
            </ColGroup>
            <HeaderContent>
                <MudTh>First Name</MudTh>
                <MudTh>Last Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Job Title</MudTh>
                <MudTh>Salary</MudTh>
            </HeaderContent>
            <RowTemplate Context="emp">
                <MudTd>@emp.FirstName</MudTd>
                <MudTd>@emp.LastName</MudTd>
                <MudTd>@emp.Email</MudTd>
                <MudTd>@emp.JobTitle</MudTd>
                <MudTd>@emp.Salary.ToString("C")</MudTd>
            </RowTemplate>
        </MudTable>

        <!-- Pagination -->
        <MudPagination Page="@currentPage" PageCount="@(totalPages)" OnPageChanged="HandlePageChange" />
    </MudPaper>
</MudContainer>

@code {
    private string searchQuery = "";
    private List<Employee> employees = new();
    private List<Employee> paginatedEmployees = new();
    private int pageSize = 2;
    private int currentPage = 1;
    private int totalPages = 1;

    protected override void OnInitialized()
    {
        employees = EmployeeService.GetEmployee();
        ApplyPagination();
    }

    private void ApplyPagination()
    {
        var filteredEmployees = employees
            .Where(e => string.IsNullOrEmpty(searchQuery) ||
                        e.FirstName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                        e.LastName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                        e.JobTitle.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        totalPages = (int)Math.Ceiling(filteredEmployees.Count / (double)pageSize);
        paginatedEmployees = filteredEmployees.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void HandlePageChange(int page)
    {
        currentPage = page;
        ApplyPagination();
        StateHasChanged();
    }

    private void HandleSearch(string value)
    {
        searchQuery = value;
        currentPage = 1; 
        ApplyPagination();
        StateHasChanged(); 
    }
}

